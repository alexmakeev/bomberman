/**\n * Main TypeScript definitions for the Bomberman multiplayer game system.\n * \n * This file serves as the central export point for all type definitions,\n * providing a convenient single import for consumers of the type system.\n * \n * @example\n * ```typescript\n * import { Game, Player, Room, GameServer } from './src';\n * \n * // Use types for implementation\n * const gameServer: GameServer = createGameServer(config);\n * ```\n */\n\n// ============================================================================\n// CORE TYPES\n// ============================================================================\n\n// Common utility types and shared interfaces\nexport * from './types/common';\n\n// Game entities and state management\nexport * from './types/game';\n\n// Player management and authentication\nexport * from './types/player';\n\n// Room and lobby management\nexport * from './types/room';\n\n// Monster and AI systems\nexport * from './types/monster';\n\n// Admin and system management\nexport * from './types/admin';\n\n// WebSocket communication protocols\nexport * from './types/websocket';\n\n// ============================================================================\n// MODULE INTERFACES\n// ============================================================================\n\n// Core game modules\nexport * from './interfaces/core/GameServer';\n// Note: Additional core module interfaces would be exported here:\n// export * from './interfaces/core/GameEngine';\n// export * from './interfaces/core/PlayerManager';\n// export * from './interfaces/core/RoomManager';\n// export * from './interfaces/core/BombSystem';\n// export * from './interfaces/core/PowerUpSystem';\n// export * from './interfaces/core/MonsterSystem';\n// export * from './interfaces/core/BossAI';\n// export * from './interfaces/core/GateSystem';\n// export * from './interfaces/core/MazeGenerator';\n\n// Client-side module interfaces\n// export * from './interfaces/client/GameClient';\n// export * from './interfaces/client/GameRenderer';\n// export * from './interfaces/client/MinimapRenderer';\n// export * from './interfaces/client/InputHandler';\n// export * from './interfaces/client/MobileControls';\n// export * from './interfaces/client/PWAManager';\n// export * from './interfaces/client/StateManager';\n\n// Admin module interfaces\n// export * from './interfaces/admin/AdminDashboard';\n// export * from './interfaces/admin/AdminAPI';\n// export * from './interfaces/admin/LoggingService';\n// export * from './interfaces/admin/ReportGenerator';\n// export * from './interfaces/admin/ConfigManager';\n\n// Infrastructure module interfaces\n// export * from './interfaces/infrastructure/Database';\n// export * from './interfaces/infrastructure/WebSocketManager';\n// export * from './interfaces/infrastructure/AuthService';\n// export * from './interfaces/infrastructure/ValidationService';\n// export * from './interfaces/infrastructure/CacheManager';\n\n// ============================================================================\n// TYPE UTILITIES\n// ============================================================================\n\n/**\n * Utility type for creating partial updates to entities\n */\nexport type EntityUpdate<T> = Partial<Omit<T, 'id' | 'createdAt'>> & {\n  id: string;\n  updatedAt: Date;\n};\n\n/**\n * Utility type for creating entity creation payloads\n */\nexport type EntityCreation<T> = Omit<T, 'id' | 'createdAt' | 'updatedAt'>;\n\n/**\n * Utility type for API response wrappers\n */\nexport type ApiResponse<T> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n  timestamp: Date;\n};\n\n/**\n * Utility type for event handlers\n */\nexport type EventListener<T = any> = (event: T) => void;\n\n/**\n * Utility type for async operations with loading state\n */\nexport type AsyncState<T> = {\n  loading: boolean;\n  data?: T;\n  error?: string;\n};\n\n/**\n * Utility type for configuration objects\n */\nexport type ConfigObject<T = any> = Record<string, T>;\n\n/**\n * Utility type for validation functions\n */\nexport type Validator<T> = (value: T) => boolean | string;\n\n/**\n * Utility type for transformation functions\n */\nexport type Transformer<TInput, TOutput> = (input: TInput) => TOutput;\n\n/**\n * Utility type for subscription cleanup functions\n */\nexport type Unsubscribe = () => void;\n\n// ============================================================================\n// NAMESPACE DECLARATIONS\n// ============================================================================\n\n/**\n * Bomberman namespace containing all game-related types and interfaces\n */\nexport namespace Bomberman {\n  // Game types\n  export type GameEntity = import('./types/game').Game;\n  export type PlayerEntity = import('./types/player').Player;\n  export type RoomEntity = import('./types/room').Room;\n  export type MonsterEntity = import('./types/monster').Monster;\n  export type BossEntity = import('./types/monster').Boss;\n  \n  // Core interfaces\n  export type GameServerInterface = import('./interfaces/core/GameServer').GameServer;\n  \n  // Message types\n  export type Message = import('./types/websocket').WebSocketMessage;\n  export type MessageType = import('./types/websocket').MessageType;\n  \n  // Common types\n  export type Position = import('./types/common').Position;\n  export type EntityId = import('./types/common').EntityId;\n  export type Timestamp = import('./types/common').Timestamp;\n}\n\n/**\n * Admin namespace for administrative functionality\n */\nexport namespace Admin {\n  export type User = import('./types/admin').AdminUser;\n  export type Session = import('./types/admin').AdminSession;\n  export type LogEntry = import('./types/admin').SystemLog;\n  export type AuditEntry = import('./types/admin').AuditLogEntry;\n  export type Metrics = import('./types/admin').SystemMetrics;\n}\n\n/**\n * Client namespace for client-side types\n */\nexport namespace Client {\n  export type DeviceInfo = import('./types/player').DeviceInfo;\n  export type InputState = import('./types/game').InputState;\n  export type AnimationState = import('./types/common').AnimationState;\n}\n\n// ============================================================================\n// VERSION INFORMATION\n// ============================================================================\n\n/**\n * Type system version information\n */\nexport const VERSION = {\n  MAJOR: 1,\n  MINOR: 0,\n  PATCH: 0,\n  FULL: '1.0.0'\n} as const;\n\n/**\n * Protocol version for WebSocket communication\n */\nexport const PROTOCOL_VERSION = '1.0.0' as const;\n\n/**\n * API version for HTTP endpoints\n */\nexport const API_VERSION = 'v1' as const;\n\n// ============================================================================\n// TYPE GUARDS\n// ============================================================================\n\n/**\n * Type guard to check if an object is a valid EntityId\n */\nexport function isEntityId(value: any): value is import('./types/common').EntityId {\n  return typeof value === 'string' && value.length > 0;\n}\n\n/**\n * Type guard to check if an object is a valid Position\n */\nexport function isPosition(value: any): value is import('./types/common').Position {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.x === 'number' &&\n    typeof value.y === 'number'\n  );\n}\n\n/**\n * Type guard to check if an object is a valid WebSocket message\n */\nexport function isWebSocketMessage(value: any): value is import('./types/websocket').WebSocketMessage {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    isEntityId(value.id) &&\n    typeof value.type === 'string' &&\n    value.timestamp instanceof Date &&\n    typeof value.version === 'string'\n  );\n}\n\n// ============================================================================\n// CONSTANTS\n// ============================================================================\n\n/**\n * Game constants used throughout the system\n */\nexport const GAME_CONSTANTS = {\n  /** Default respawn time in seconds */\n  DEFAULT_RESPAWN_TIME: 10,\n  /** Maximum players per room */\n  MAX_PLAYERS_PER_ROOM: 8,\n  /** Minimum players to start game */\n  MIN_PLAYERS_TO_START: 2,\n  /** Default bomb timer in milliseconds */\n  DEFAULT_BOMB_TIMER: 3000,\n  /** Default blast radius in tiles */\n  DEFAULT_BLAST_RADIUS: 2,\n  /** Maximum power-up level */\n  MAX_POWER_LEVEL: 10,\n  /** Default maze size */\n  DEFAULT_MAZE_SIZE: { width: 15, height: 11 }\n} as const;\n\n/**\n * Network constants for WebSocket communication\n */\nexport const NETWORK_CONSTANTS = {\n  /** Default WebSocket port */\n  DEFAULT_PORT: 8080,\n  /** Connection timeout in milliseconds */\n  CONNECTION_TIMEOUT: 30000,\n  /** Ping interval in milliseconds */\n  PING_INTERVAL: 25000,\n  /** Maximum message size in bytes */\n  MAX_MESSAGE_SIZE: 64 * 1024, // 64KB\n  /** Rate limit: messages per minute */\n  RATE_LIMIT_MESSAGES_PER_MINUTE: 120\n} as const;"