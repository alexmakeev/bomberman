/**\n * GameServer interface - Central server module coordinating WebSocket connections and room management.\n * \n * This is the main orchestrator that handles:\n * - WebSocket connection lifecycle\n * - Room creation and management\n * - Game session coordination\n * - Message broadcasting and routing\n * - Server health monitoring\n */\n\nimport { EntityId, Result, ValidationResult } from '../../types/common';\nimport { Room, RoomSettings, RoomPlayer } from '../../types/room';\nimport { Game } from '../../types/game';\nimport { WebSocketMessage } from '../../types/websocket';\n\n/**\n * Server configuration parameters\n */\nexport interface ServerConfig {\n  /** Server port number */\n  port: number;\n  /** Maximum concurrent connections */\n  maxConnections: number;\n  /** Connection timeout (milliseconds) */\n  connectionTimeout: number;\n  /** Enable message compression */\n  enableCompression: boolean;\n  /** Rate limiting rules */\n  rateLimiting: RateLimitConfig;\n  /** Security settings */\n  security: SecurityConfig;\n  /** CORS settings */\n  cors: CORSConfig;\n}\n\n/**\n * Rate limiting configuration\n */\nexport interface RateLimitConfig {\n  /** Messages per minute per connection */\n  messagesPerMinute: number;\n  /** Burst allowance */\n  burstSize: number;\n  /** Rate limit window (milliseconds) */\n  windowMs: number;\n}\n\n/**\n * Security configuration\n */\nexport interface SecurityConfig {\n  /** Require authentication */\n  requireAuth: boolean;\n  /** Enable SSL/TLS */\n  enableSSL: boolean;\n  /** SSL certificate path */\n  sslCertPath?: string;\n  /** SSL private key path */\n  sslKeyPath?: string;\n  /** Token expiry time (milliseconds) */\n  tokenExpiryMs: number;\n}\n\n/**\n * CORS configuration\n */\nexport interface CORSConfig {\n  /** Allowed origins */\n  allowedOrigins: string[];\n  /** Allowed methods */\n  allowedMethods: string[];\n  /** Allowed headers */\n  allowedHeaders: string[];\n  /** Allow credentials */\n  allowCredentials: boolean;\n}\n\n/**\n * WebSocket connection wrapper\n */\nexport interface WebSocketConnection {\n  /** Connection identifier */\n  id: EntityId;\n  /** Raw WebSocket instance */\n  socket: any; // WebSocket type from ws library\n  /** Client IP address */\n  ipAddress: string;\n  /** Connection timestamp */\n  connectedAt: Date;\n  /** Last activity timestamp */\n  lastActivity: Date;\n  /** Associated player ID (if authenticated) */\n  playerId?: EntityId;\n  /** Connection metadata */\n  metadata: ConnectionMetadata;\n}\n\n/**\n * Connection metadata\n */\nexport interface ConnectionMetadata {\n  /** User agent string */\n  userAgent: string;\n  /** Client protocol version */\n  protocolVersion: string;\n  /** Connection latency (milliseconds) */\n  latency: number;\n  /** Rate limiting state */\n  rateLimitState: RateLimitState;\n}\n\n/**\n * Rate limiting state per connection\n */\nexport interface RateLimitState {\n  /** Message count in current window */\n  messageCount: number;\n  /** Current window start time */\n  windowStart: Date;\n  /** Rate limit violations */\n  violations: number;\n  /** Connection blocked until */\n  blockedUntil?: Date;\n}\n\n/**\n * Server operational status\n */\nexport interface ServerStatus {\n  /** Server is running */\n  running: boolean;\n  /** Server start time */\n  startTime: Date;\n  /** Server uptime (milliseconds) */\n  uptime: number;\n  /** Active connection count */\n  activeConnections: number;\n  /** Active room count */\n  activeRooms: number;\n  /** Active game count */\n  activeGames: number;\n  /** Total players online */\n  totalPlayers: number;\n  /** Server performance metrics */\n  performance: ServerPerformanceMetrics;\n}\n\n/**\n * Server performance metrics\n */\nexport interface ServerPerformanceMetrics {\n  /** CPU usage percentage */\n  cpuUsage: number;\n  /** Memory usage (bytes) */\n  memoryUsage: number;\n  /** Messages per second */\n  messagesPerSecond: number;\n  /** Average message processing time (milliseconds) */\n  avgProcessingTime: number;\n  /** Error rate (errors per minute) */\n  errorRate: number;\n}\n\n/**\n * Game result data\n */\nexport interface GameResult {\n  /** Game identifier */\n  gameId: EntityId;\n  /** Game outcome */\n  outcome: 'victory' | 'defeat' | 'timeout' | 'terminated';\n  /** Game duration (milliseconds) */\n  duration: number;\n  /** Participating players */\n  participants: EntityId[];\n  /** Game statistics */\n  statistics: any; // GameStatistics from game.d.ts\n  /** End timestamp */\n  endedAt: Date;\n}\n\n/**\n * Connection handling result\n */\nexport interface ConnectionResult {\n  /** Connection accepted */\n  success: boolean;\n  /** Connection identifier */\n  connectionId?: EntityId;\n  /** Rejection reason */\n  error?: string;\n  /** Additional data */\n  data?: any;\n}\n\n/**\n * Main GameServer interface\n */\nexport interface GameServer {\n  /**\n   * Start the WebSocket server\n   * @param port - Port number to listen on\n   * @param config - Server configuration\n   * @returns Promise that resolves when server is started\n   * @throws Error if server fails to start or port is in use\n   */\n  startServer(port: number, config: ServerConfig): Promise<void>;\n\n  /**\n   * Stop the WebSocket server gracefully\n   * @returns Promise that resolves when server is stopped\n   * @throws Error if server fails to stop cleanly\n   */\n  stopServer(): Promise<void>;\n\n  /**\n   * Handle new WebSocket connection\n   * @param connection - New connection to handle\n   * @returns void - Connection handling is asynchronous\n   * @throws Error if connection cannot be established\n   */\n  handleConnection(connection: WebSocketConnection): void;\n\n  /**\n   * Handle WebSocket disconnection\n   * @param connectionId - ID of disconnecting connection\n   * @returns void - Cleanup is performed asynchronously\n   * @throws Error if connection cleanup fails\n   */\n  handleDisconnection(connectionId: EntityId): void;\n\n  /**\n   * Create a new game room\n   * @param hostId - Player ID of room host\n   * @param settings - Room configuration settings\n   * @returns Promise resolving to created room\n   * @throws Error if room creation fails or host is invalid\n   */\n  createRoom(hostId: EntityId, settings: RoomSettings): Promise<Room>;\n\n  /**\n   * Add player to existing room\n   * @param roomId - Target room identifier\n   * @param playerId - Player to add to room\n   * @returns Promise resolving to room player data\n   * @throws Error if room is full, not found, or player cannot join\n   */\n  joinRoom(roomId: EntityId, playerId: EntityId): Promise<RoomPlayer>;\n\n  /**\n   * Remove player from room\n   * @param roomId - Target room identifier\n   * @param playerId - Player to remove from room\n   * @returns Promise that resolves when player is removed\n   * @throws Error if room or player not found\n   */\n  leaveRoom(roomId: EntityId, playerId: EntityId): Promise<void>;\n\n  /**\n   * Close and cleanup room\n   * @param roomId - Room to close\n   * @param reason - Optional closure reason\n   * @returns Promise that resolves when room is closed\n   * @throws Error if room cannot be closed or not found\n   */\n  closeRoom(roomId: EntityId, reason?: string): Promise<void>;\n\n  /**\n   * Start game in room\n   * @param roomId - Room to start game in\n   * @returns Promise resolving to started game\n   * @throws Error if game cannot start or room not ready\n   */\n  startGame(roomId: EntityId): Promise<Game>;\n\n  /**\n   * End active game\n   * @param gameId - Game to end\n   * @param result - Game outcome data\n   * @returns Promise that resolves when game is ended\n   * @throws Error if game not found or cannot be ended\n   */\n  endGame(gameId: EntityId, result: GameResult): Promise<void>;\n\n  /**\n   * Pause active game\n   * @param gameId - Game to pause\n   * @returns Promise that resolves when game is paused\n   * @throws Error if game not found or cannot be paused\n   */\n  pauseGame(gameId: EntityId): Promise<void>;\n\n  /**\n   * Resume paused game\n   * @param gameId - Game to resume\n   * @returns Promise that resolves when game is resumed\n   * @throws Error if game not found or cannot be resumed\n   */\n  resumeGame(gameId: EntityId): Promise<void>;\n\n  /**\n   * Broadcast message to all players in room\n   * @param roomId - Target room\n   * @param message - Message to broadcast\n   * @returns void - Broadcasting is fire-and-forget\n   * @throws Error if room not found\n   */\n  broadcastToRoom(roomId: EntityId, message: WebSocketMessage): void;\n\n  /**\n   * Broadcast message to all players in game\n   * @param gameId - Target game\n   * @param message - Message to broadcast\n   * @returns void - Broadcasting is fire-and-forget\n   * @throws Error if game not found\n   */\n  broadcastToGame(gameId: EntityId, message: WebSocketMessage): void;\n\n  /**\n   * Send message to specific player\n   * @param playerId - Target player\n   * @param message - Message to send\n   * @returns void - Message sending is fire-and-forget\n   * @throws Error if player not found or not connected\n   */\n  sendToPlayer(playerId: EntityId, message: WebSocketMessage): void;\n\n  /**\n   * Send message to admin user\n   * @param adminId - Target administrator\n   * @param message - Message to send\n   * @returns void - Message sending is fire-and-forget\n   * @throws Error if admin not found or not connected\n   */\n  sendToAdmin(adminId: EntityId, message: WebSocketMessage): void;\n\n  /**\n   * Get current server operational status\n   * @returns Current server status and metrics\n   * @throws Error if status cannot be retrieved\n   */\n  getServerStatus(): ServerStatus;\n\n  /**\n   * Get list of active game rooms\n   * @returns Array of active rooms\n   * @throws Error if room list cannot be retrieved\n   */\n  getActiveRooms(): Room[];\n\n  /**\n   * Get list of active games\n   * @returns Array of active games\n   * @throws Error if game list cannot be retrieved\n   */\n  getActiveGames(): Game[];\n\n  /**\n   * Get total number of connected players\n   * @returns Current player count\n   * @throws Error if player count cannot be determined\n   */\n  getPlayerCount(): number;\n}\n\n/**\n * GameServer factory function type\n */\nexport type GameServerFactory = (config: ServerConfig) => GameServer;\n\n/**\n * GameServer event types for lifecycle monitoring\n */\nexport enum GameServerEventType {\n  SERVER_STARTED = 'server_started',\n  SERVER_STOPPED = 'server_stopped',\n  CONNECTION_OPENED = 'connection_opened',\n  CONNECTION_CLOSED = 'connection_closed',\n  ROOM_CREATED = 'room_created',\n  ROOM_CLOSED = 'room_closed',\n  GAME_STARTED = 'game_started',\n  GAME_ENDED = 'game_ended',\n  ERROR_OCCURRED = 'error_occurred'\n}\n\n/**\n * GameServer event data\n */\nexport interface GameServerEvent {\n  /** Event type */\n  type: GameServerEventType;\n  /** Event timestamp */\n  timestamp: Date;\n  /** Event-specific data */\n  data?: any;\n  /** Error information (if applicable) */\n  error?: Error;\n}"