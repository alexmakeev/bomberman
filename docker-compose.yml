version: '3.8'

services:
  # Node.js Application Server
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: bomberman-app
    ports:
      - "8080:8080"  # Public HTTP port accessible to network
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=bomberman
      - POSTGRES_USER=bomberman_user
      - POSTGRES_PASSWORD=bomberman_pass
      - JWT_SECRET=your-jwt-secret-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs  # Mount logs directory
    restart: unless-stopped
    networks:
      - bomberman-network

  # PostgreSQL Database - Persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: bomberman-postgres
    environment:
      - POSTGRES_DB=bomberman
      - POSTGRES_USER=bomberman_user
      - POSTGRES_PASSWORD=bomberman_pass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"  # Expose for development access
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d  # Initialization scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bomberman_user -d bomberman"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - bomberman-network

  # Redis - Real-time state and pub/sub
  redis:
    image: redis:7-alpine
    container_name: bomberman-redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"  # Expose for development access
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - bomberman-network

  # Nginx - Reverse proxy and static file server
  nginx:
    image: nginx:1.24-alpine
    container_name: bomberman-nginx
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS (for production SSL)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./client/dist:/usr/share/nginx/html  # Static files
      - ./nginx/ssl:/etc/nginx/ssl  # SSL certificates
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - bomberman-network

  # Redis Commander - Redis management UI (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bomberman-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - development  # Only start in development profile
    networks:
      - bomberman-network

  # pgAdmin - PostgreSQL management UI (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bomberman-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@bomberman.local
      - PGADMIN_DEFAULT_PASSWORD=admin_password
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - development  # Only start in development profile
    networks:
      - bomberman-network

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network for service communication
networks:
  bomberman-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16